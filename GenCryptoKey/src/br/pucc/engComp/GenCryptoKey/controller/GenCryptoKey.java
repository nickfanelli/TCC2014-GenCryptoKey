package br.pucc.engComp.GenCryptoKey.controller;

import java.util.ArrayList;
import java.util.Calendar;

import br.pucc.engComp.GenCryptoKey.evaluation.EvaluationTests;
import br.pucc.engComp.GenCryptoKey.models.KeypairDAO;
import br.pucc.engComp.GenCryptoKey.models.SettingsDAO;
import br.pucc.engComp.GenCryptoKey.views.Home;

public final class GenCryptoKey {

	public static RSAKeypair rsaKeypair;
	public static KeypairPOJO generatedKeypair;

	public GenCryptoKey(){}

	public static void run() {
		String ind
		String ind
		String ind
		String ind4 = "1001010101001011110100011010010001000101110111011010010110000110110101110010111110011111001000010001001111100001100101000001000100101010010110010011000011101000000111111100010011111111101010011001010010000111011000101010111010000100100001111100011111010000001101000100000010100010101011100001101111101110000100101000010010001001111101010000110001100100000111111110010011011000101000001001111011110010001101111111111001101000100110110001111001100010101001010101110001100001000110101000111110011101010101011001110100000000101011000000010010001111000110001101101001111111101010011111111000101000001111000100111111010100001111011100101000000010111010001011001010010010101010111111100111101111110000110000001011011111111010110110100101011000110111001001100001010000011110111101000010100111001110001010011100010100100111101001100010110110011110110100010100011011011000001001100010111101111011111101100011111111101011010101010011001111101101000110000011101001100001011010111000100101011100001010010011000100000000110100100001100110";
		String ind
		String ind
		String ind
		String ind8 = "1010101110010111001011101001011111010111011011111011111000101101101100110100100111010011110100101111010010001110011011000111110101010000101101010100001001011011001110110100000110000011001000110111001101010000001011111011010110001000000001100101001111111000101010111110001100000100100000110101101011110000001101111000001010011010111011011011100101000110010000111001101000011111000010001001101010001001010110000101100101101110111101001000011110100110010101101011010001111101110010000011010000111110110010100111101110010001010101010111100011011101000110001000101000101010011111010011011100100101011000011001001001111111101010000101000110100000101010110000100100011011001110001010100101011111001011111111001111100110001111111011111111000010100010000010011000011011101101010000001100000000000111011100000101110010000100000111111010000000100000110100100110001101100111101101101110100110011111010011111111110101000111110100000101111000100101101011100011001110111111001011011011000010101111100000100001011010000100010110100111001011";
		String ind
		String ind
		String ind
		ExportKey.exportBinaryIndividualForEvaluation(ind1);
		ExportKey.exportBinaryIndividualForEvaluation(ind2);
		ExportKey.exportBinaryIndividualForEvaluation(ind3);
		ExportKey.exportBinaryIndividualForEvaluation(ind4);
		ExportKey.exportBinaryIndividualForEvaluation(ind5);
		ExportKey.exportBinaryIndividualForEvaluation(ind6);
		ExportKey.exportBinaryIndividualForEvaluation(ind7);
		ExportKey.exportBinaryIndividualForEvaluation(ind8);
		ExportKey.exportBinaryIndividualForEvaluation(ind9);
		ExportKey.exportBinaryIndividualForEvaluation(ind10);
		ExportKey.exportBinaryIndividualForEvaluation(ind11);
		// Performing evaluation tests
		EvaluationTests.Evaluate(1024, 11);

		DB.getConnection();

		// Check database for previously saved settings
		// If there are saved settings on DB, populate them
		ArrayList<SettingsPOJO> previousSettings = null;
		try {
			previousSettings = SettingsDAO.getAllSettingsProfiles();
		} catch (Exception e) {
			e.printStackTrace();
		}

		if(previousSettings != null && !previousSettings.isEmpty()) { // Use the last saved settings --> (previousSettings.size()-1)
			Settings.setIndividualSize(previousSettings.get(previousSettings.size()-1).getIndividualSize());
			Settings.setInitialPopulationSize(previousSettings.get(previousSettings.size()-1).getInitialPopulationSize());
			Settings.setNumOfCrossoverPoints(previousSettings.get(previousSettings.size()-1).getNumOfCrossoverPoints());
			Settings.setNumOfMutationsPerIndividual(previousSettings.get(previousSettings.size()-1).getNumOfMutationsPerIndividual());
			Settings.setMutationRate(previousSettings.get(previousSettings.size()-1).getMutationRate());
			Settings.setPercentageOfIndividualsToCross(previousSettings.get(previousSettings.size()-1).getPercentageOfIndividualsToCross());
			Settings.setMaxPopulationSize(previousSettings.get(previousSettings.size()-1).getMaxPopulationSize());
			Settings.setMaxGenerationsToStop(previousSettings.get(previousSettings.size()-1).getMaxGenerationsToStop());
			Settings.setScheduledKeyGeneration(previousSettings.get(previousSettings.size()-1).isScheduledKeyGeneration());
			Settings.setScheduledKeyGenerationTime(previousSettings.get(previousSettings.size()-1).getScheduledKeyGenerationTime());
			Settings.setWriteLogActive(previousSettings.get(previousSettings.size()-1).isWriteLogActive());
		}

		System.out.println("individualSize = " + Settings.getIndividualSize());
		System.out.println("initialPopulationSize = " + Settings.getInitialPopulationSize());
		System.out.println("numOfCrossoverPoints = " + Settings.getNumOfCrossoverPoints());
		System.out.println("numOfMutationsPerIndividual = " + Settings.getNumOfMutationsPerIndividual());
		System.out.println("mutationRate = " + Settings.getMutationRate());
		System.out.println("percentageOfIndividualsToCross = " + Settings.getPercentageOfIndividualsToCross());
		System.out.println("maxPopulationSize = " + Settings.getMaxPopulationSize());
		System.out.println("maxGenerationsToStop = " + Settings.getMaxGenerationsToStop());
		//		System.out.println("scheduledKeyGeneration = " + Settings.isScheduledKeyGeneration());
		//		System.out.println("scheduledKeyGenerationTime = " + Settings.getScheduledKeyGenerationTime());
		System.out.println("writeLog = " + Settings.isWriteLogActive());


		// Initial population
		Population myPop = new Population();

		// Evolve the algorithm until the optimal solution is found
		int generationCount = 1;

		GeneticAlgorithm.evaluateFitness(myPop);
		GeneticAlgorithm.rankSelection(myPop);
		// FIXME: dynamically assign maximum generations from the Settings value -> Settings.getMaxGenerationsToStop()

		while (generationCount <= 1) {
			System.out.println("######################################## GENERATION #: " + generationCount + " #####################################################");
			System.out.println("######################################## GENERATION #: " + generationCount + " #####################################################");
			GeneticAlgorithm.evolvePopulation(myPop);
			generationCount++;
		}

		// Exporting individual for evaluation
		ExportKey.exportBinaryIndividualForEvaluation(myPop.getIndividual(0).toBinaryString());



		// Generate key pair using the fittest individual as base
		rsaKeypair = new RSAKeypair(myPop.getIndividual(0));
		rsaKeypair.generateKeyPair();

		generatedKeypair = new KeypairPOJO();
		generatedKeypair.setGeneratedKeyBase64(RSAKeypair.toBase64(rsaKeypair));// FIXME: convert to PEM specification
		generatedKeypair.setPublicExponent(rsaKeypair.getE().toString());
		generatedKeypair.setPrivateExponent(rsaKeypair.getD().toString());
		generatedKeypair.setModulus(rsaKeypair.getN().toString());
		// Keypair description is set from user input off of the message dialog
		generatedKeypair.setKeypairDescription(Home.queryUserForKeypairDescription());
		generatedKeypair.setGenerationTimestamp(Calendar.getInstance());

		try {
			if(KeypairDAO.newKeypair(generatedKeypair) != -1) {
				//JOptionPane.showMessageDialog(null, "New keypair registered.", "Keypair registered", JOptionPane.INFORMATION_MESSAGE);
				System.out.println("New keypair registered.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error inserting keypair to database: " + e.getMessage());
		}

		rsaKeypair.printExample();

		System.out.println("Execution complete.");
	}

	public static void runGraphically() {
		// TODO Run graphical execution where user can follow the whole key generation process
	}
}